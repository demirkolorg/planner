
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model User {
  id               String            @id @default(cuid())
  firstName        String
  lastName         String
  email            String            @unique
  password         String
  projects         Project[]
  tasks            Task[]
  tags             Tag[]
  taskActivities   TaskActivity[]
  projectActivities ProjectActivity[]
  comments         Comment[]
  notifications    InAppNotification[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Project {
  id         String            @id @default(cuid())
  name       String
  emoji      String?
  notes      String?
  userId     String
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks      Task[]
  sections   Section[]
  activities ProjectActivity[]
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
}

model Task {
  id           String         @id @default(cuid())
  title        String
  description  String?
  completed    Boolean        @default(false)
  priority     String         @default("NONE")
  dueDate      DateTime?
  isPinned     Boolean        @default(false)
  parentTaskId String?
  parentTask   Task?          @relation("SubTasks", fields: [parentTaskId], references: [id], onDelete: Cascade)
  subTasks     Task[]         @relation("SubTasks")
  projectId    String
  project      Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  sectionId    String?
  section      Section?       @relation(fields: [sectionId], references: [id], onDelete: SetNull)
  userId       String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags         TaskTag[]
  reminders    Reminder[]
  activities   TaskActivity[]
  comments     Comment[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Section {
  id        String   @id @default(cuid())
  name      String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks     Task[]
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id        String    @id @default(cuid())
  name      String
  color     String
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks     TaskTag[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  @@unique([name, userId])
}

model TaskTag {
  id     String @id @default(cuid())
  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tagId  String
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@unique([taskId, tagId])
}

model Reminder {
  id        String   @id @default(cuid())
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  datetime  DateTime
  message   String?
  isActive  Boolean  @default(true)
  notified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TaskActivity {
  id          String   @id @default(cuid())
  taskId      String
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  actionType  String   // "created", "updated", "completed", "priority_changed", "tag_added", "tag_removed", "moved", "deleted", "comment_added", "comment_deleted"
  oldValue    String?
  newValue    String?
  description String
  createdAt   DateTime @default(now())
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  taskId    String
  task      Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentId  String?
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ProjectActivity {
  id          String   @id @default(cuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  actionType  String   // "project_created", "project_updated", "project_deleted", "section_created", "section_moved", "section_deleted", "task_created", "task_completed", "task_uncompleted"
  entityType  String   // "project", "section", "task"
  entityId    String?  // ID of section or task if applicable
  entityName  String?  // Name of section or task for easier display
  oldValue    String?
  newValue    String?
  description String
  createdAt   DateTime @default(now())
}

model InAppNotification {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type       String   // "REMINDER", "TASK_DUE", "TASK_OVERDUE", "SYSTEM"
  title      String
  message    String
  priority   String   @default("MEDIUM") // "LOW", "MEDIUM", "HIGH", "URGENT"
  isRead     Boolean  @default(false)
  taskId     String?
  reminderId String?
  metadata   Json?    // Ek bilgiler i√ßin JSON field
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

