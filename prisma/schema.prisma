generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String                     @id @default(cuid())
  firstName             String
  lastName              String
  email                 String                     @unique
  password              String
  createdAt             DateTime                   @default(now())
  updatedAt             DateTime                   @updatedAt
  emailVerified         Boolean                    @default(false)
  role                  UserRole                   @default(USER)
  comments              Comment[]
  otps                  EmailOTP[]
  googleCalendar        GoogleCalendarIntegration?
  projects              Project[]
  projectActivities     ProjectActivity[]
  projectMembers        ProjectMember[]
  tags                  Tag[]
  tasks                 Task[]
  taskActivities        TaskActivity[]
  assignedBy            TaskAssignment[]           @relation("TaskAssigned")
  assignedTasks         TaskAssignment[]           @relation("TaskAssignments")
  notifications         Notification[]
  notificationSettings  NotificationSettings?
  createdNotifications  Notification[]             @relation("NotificationCreator")
  approvalRequestedTasks Task[]                    @relation("TaskApprovalRequester")
  approvedTasks         Task[]                     @relation("TaskApprover")
  sectionAssignments    SectionAssignment[]        @relation("SectionAssignee")
  assignedSections      SectionAssignment[]        @relation("SectionAssigner")
  projectAssignments    ProjectAssignment[]        @relation("ProjectAssignee")
  assignedProjects      ProjectAssignment[]        @relation("ProjectAssigner")
  emailAssignments      EmailAssignment[]          @relation("EmailAssignmentAssigner")
  sentInvitations       PendingUserInvitation[]    @relation("UserInvitations")
}

model EmailOTP {
  id        String   @id @default(cuid())
  email     String
  code      String
  type      String
  expiresAt DateTime
  used      Boolean  @default(false)
  userId    String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email, type])
}

model Project {
  id           String                @id @default(cuid())
  name         String
  emoji        String?
  notes        String?
  userId       String
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  isPinned     Boolean               @default(false)
  isPublic     Boolean               @default(false)
  user         User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  activities   ProjectActivity[]
  customFields ProjectCustomField[]
  members      ProjectMember[]
  assignments  ProjectAssignment[]
  invitations  PendingUserInvitation[] @relation("ProjectInvitations")
  sections     Section[]
  tasks        Task[]
}

model Task {
  id                String             @id @default(cuid())
  title             String
  description       String?
  completed         Boolean            @default(false)
  priority          String             @default("NONE")
  dueDate           DateTime?
  isPinned          Boolean            @default(false)
  syncToCalendar    Boolean            @default(false)
  parentTaskId      String?
  projectId         String?
  sectionId         String?
  userId            String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  level             Int                @default(0)
  calendarSourceId  String?
  quickNoteCategory String?
  taskType          TaskType           @default(PROJECT)
  approvalStatus    TaskApprovalStatus @default(NOT_REQUIRED)
  approvalMessage   String?
  approvalRequestedBy String?
  approvalRequestedAt DateTime?
  approvedBy        String?
  approvedAt        DateTime?
  comments          Comment[]
  parentTask        Task?              @relation("SubTasks", fields: [parentTaskId], references: [id], onDelete: Cascade)
  subTasks          Task[]             @relation("SubTasks")
  project           Project?           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  section           Section?           @relation(fields: [sectionId], references: [id])
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  activities        TaskActivity[]
  assignments       TaskAssignment[]
  calendarEvent     TaskCalendarEvent?
  tags              TaskTag[]
  approvalRequester User?              @relation("TaskApprovalRequester", fields: [approvalRequestedBy], references: [id])
  approver          User?              @relation("TaskApprover", fields: [approvedBy], references: [id])
}

model Section {
  id          String              @id @default(cuid())
  name        String
  projectId   String
  order       Int                 @default(0)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  project     Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks       Task[]
  assignments SectionAssignment[]
}

model Tag {
  id        String    @id @default(cuid())
  name      String
  color     String
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks     TaskTag[]

  @@unique([name, userId])
}

model TaskTag {
  id     String @id @default(cuid())
  taskId String
  tagId  String
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, tagId])
}

model TaskActivity {
  id          String   @id @default(cuid())
  taskId      String
  userId      String
  actionType  String
  oldValue    String?
  newValue    String?
  description String
  createdAt   DateTime @default(now())
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  taskId    String
  userId    String
  parentId  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")
  task      Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProjectActivity {
  id          String   @id @default(cuid())
  projectId   String
  userId      String
  actionType  String
  entityType  String
  entityId    String?
  entityName  String?
  oldValue    String?
  newValue    String?
  description String
  createdAt   DateTime @default(now())
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GoogleCalendarIntegration {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  googleAccountId        String
  accessToken            String
  refreshToken           String
  readOnlyCalendarIds    String[]
  plannerCalendarId      String?
  plannerCalendarCreated Boolean   @default(false)
  syncEnabled            Boolean   @default(true)
  lastSyncAt             DateTime?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  calendarIds            String[]  @default([])
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model TaskCalendarEvent {
  id            String    @id @default(cuid())
  taskId        String    @unique
  googleEventId String    @unique
  calendarId    String
  syncStatus    String    @default("PENDING")
  lastSyncAt    DateTime?
  errorMessage  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  task          Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([googleEventId])
}

model ProjectCustomField {
  id        String   @id @default(cuid())
  projectId String
  key       String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, key])
  @@index([projectId])
}

model TaskAssignment {
  id         String   @id @default(cuid())
  taskId     String
  assigneeId String
  assignedBy String
  assignedAt DateTime @default(now())
  assigner   User     @relation("TaskAssigned", fields: [assignedBy], references: [id], onDelete: Cascade)
  assignee   User     @relation("TaskAssignments", fields: [assigneeId], references: [id], onDelete: Cascade)
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, assigneeId])
  @@index([taskId])
  @@index([assigneeId])
}

model ProjectMember {
  id        String      @id @default(cuid())
  projectId String
  userId    String
  role      ProjectRole @default(MEMBER)
  addedAt   DateTime    @default(now())
  addedBy   String?
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
}

model SectionAssignment {
  id         String      @id @default(cuid())
  sectionId  String
  assigneeId String
  assignedBy String
  role       SectionRole @default(MEMBER)
  assignedAt DateTime    @default(now())
  section    Section     @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  assignee   User        @relation("SectionAssignee", fields: [assigneeId], references: [id], onDelete: Cascade)
  assigner   User        @relation("SectionAssigner", fields: [assignedBy], references: [id], onDelete: Cascade)

  @@unique([sectionId, assigneeId])
  @@index([sectionId])
  @@index([assigneeId])
}

model ProjectAssignment {
  id         String                @id @default(cuid())
  projectId  String
  assigneeId String
  assignedBy String
  role       ProjectAssignmentRole @default(COLLABORATOR)
  assignedAt DateTime              @default(now())
  project    Project               @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee   User                  @relation("ProjectAssignee", fields: [assigneeId], references: [id], onDelete: Cascade)
  assigner   User                  @relation("ProjectAssigner", fields: [assignedBy], references: [id], onDelete: Cascade)

  @@unique([projectId, assigneeId])
  @@index([projectId])
  @@index([assigneeId])
}

enum UserRole {
  ADMIN
  USER
}

enum TaskType {
  PROJECT
  CALENDAR
  QUICK_NOTE
}

enum TaskApprovalStatus {
  NOT_REQUIRED    // Onay gerekmiyor (normal durum)
  PENDING         // Onay bekliyor
  APPROVED        // Onaylandı
  REJECTED        // Reddedildi
}

model Notification {
  id          String              @id @default(cuid())
  userId      String              
  title       String
  message     String
  type        NotificationType
  entityType  String?             // 'task', 'project', 'comment' vs.
  entityId    String?             // İlgili entity'nin ID'si
  actionUrl   String?             // Tıklayınca yönlendirileceği URL
  isRead      Boolean             @default(false)
  createdBy   String?             // Bildirimi oluşturan kullanıcı
  metadata    Json?               // Ek bilgiler için JSON field
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  creator     User?               @relation("NotificationCreator", fields: [createdBy], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([userId, isRead])
  @@index([createdAt])
}

model NotificationSettings {
  id                    String   @id @default(cuid())
  userId                String   @unique
  emailNotifications    Boolean  @default(true)
  pushNotifications     Boolean  @default(true)
  taskAssignment        Boolean  @default(true)
  taskComments          Boolean  @default(true)
  taskStatusChanges     Boolean  @default(true)
  projectUpdates        Boolean  @default(true)
  mentionsOnly          Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_COMMENT
  TASK_STATUS_CHANGED
  TASK_DUE_SOON
  PROJECT_INVITE
  PROJECT_UPDATE
  MENTION
  GENERAL
}

enum ProjectRole {
  OWNER
  MEMBER  
  VIEWER
}

enum SectionRole {
  OWNER       // Bölüm sorumlusu
  MEMBER      // Bölüm üyesi
}

enum ProjectAssignmentRole {
  COLLABORATOR  // Tüm projede çalışabilir
  VIEWER        // Sadece görüntüleyebilir
}

// Email tabanlı atama türleri
enum AssignmentTargetType {
  PROJECT       // Proje seviyesi atama
  SECTION       // Bölüm seviyesi atama  
  TASK          // Görev seviyesi atama
}

enum AssignmentStatus {
  PENDING       // Kullanıcı henüz kayıt olmadı
  ACTIVE        // Kullanıcı kayıt oldu, atama aktif
  EXPIRED       // Davetiye süresi doldu
  CANCELLED     // Atama iptal edildi
}

// Email ile atama tablosu - kayıtsız kullanıcılar için
model EmailAssignment {
  id          String                @id @default(cuid())
  email       String                // Atanan email
  targetType  AssignmentTargetType  // Ne türü atama (project/section/task)
  targetId    String                // Hedef ID'si (projectId/sectionId/taskId)
  role        String                // Rol bilgisi (JSON string olarak saklanacak)
  assignedBy  String                // Atamayı yapan kullanıcı
  status      AssignmentStatus      @default(PENDING)
  message     String?               // Davetiye mesajı
  expiresAt   DateTime?             // Davetiye sona erme tarihi
  assignedAt  DateTime              @default(now())
  acceptedAt  DateTime?             // Kullanıcı kabul ettiği tarih
  
  // Relations
  assigner    User                  @relation("EmailAssignmentAssigner", fields: [assignedBy], references: [id], onDelete: Cascade)
  
  @@index([email, status])
  @@index([targetType, targetId])
  @@index([assignedBy])
}

// Kullanıcı davetiye sistemi
model PendingUserInvitation {
  id            String            @id @default(cuid())
  email         String            // Davet edilen email
  invitedBy     String            // Daveti gönderen kullanıcı
  inviteType    String            // 'project' | 'assignment'
  projectId     String?           // İlgili proje ID'si
  projectName   String?           // Proje adı (email için)
  metadata      Json?             // Ek bilgiler (assignment detayları vs)
  message       String?           // Kişiselleştirilmiş mesaj
  status        String            @default("PENDING") // PENDING, ACCEPTED, EXPIRED
  expiresAt     DateTime          // Davetiye sona erme tarihi
  createdAt     DateTime          @default(now())
  acceptedAt    DateTime?         // Kabul edilme tarihi
  
  // Relations
  inviter       User              @relation("UserInvitations", fields: [invitedBy], references: [id], onDelete: Cascade)
  project       Project?          @relation("ProjectInvitations", fields: [projectId], references: [id], onDelete: Cascade)
  
  @@index([email, status])
  @@index([invitedBy])
  @@index([projectId])
}
