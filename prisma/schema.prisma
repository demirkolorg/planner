generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String            @id @default(cuid())
  firstName         String
  lastName          String
  email             String            @unique
  password          String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  emailVerified     Boolean           @default(false)
  role              UserRole          @default(USER)
  comments          Comment[]
  otps              EmailOTP[]
  projects          Project[]
  projectActivities ProjectActivity[]
  tags              Tag[]
  tasks             Task[]
  taskActivities    TaskActivity[]
}

model EmailOTP {
  id        String   @id @default(cuid())
  email     String
  code      String
  type      String
  expiresAt DateTime
  used      Boolean  @default(false)
  userId    String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email, type])
}

model Project {
  id         String            @id @default(cuid())
  name       String
  emoji      String?
  notes      String?
  userId     String
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  activities ProjectActivity[]
  sections   Section[]
  tasks      Task[]
}

model Task {
  id           String         @id @default(cuid())
  title        String
  description  String?
  completed    Boolean        @default(false)
  priority     String         @default("NONE")
  dueDate      DateTime?
  isPinned     Boolean        @default(false)
  parentTaskId String?
  projectId    String
  sectionId    String?
  userId       String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  comments     Comment[]
  parentTask   Task?          @relation("SubTasks", fields: [parentTaskId], references: [id], onDelete: Cascade)
  subTasks     Task[]         @relation("SubTasks")
  project      Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  section      Section?       @relation(fields: [sectionId], references: [id])
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  activities   TaskActivity[]
  tags         TaskTag[]
}

model Section {
  id        String   @id @default(cuid())
  name      String
  projectId String
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks     Task[]
}

model Tag {
  id        String    @id @default(cuid())
  name      String
  color     String
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks     TaskTag[]

  @@unique([name, userId])
}

model TaskTag {
  id     String @id @default(cuid())
  taskId String
  tagId  String
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, tagId])
}

model TaskActivity {
  id          String   @id @default(cuid())
  taskId      String
  userId      String
  actionType  String
  oldValue    String?
  newValue    String?
  description String
  createdAt   DateTime @default(now())
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  taskId    String
  userId    String
  parentId  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")
  task      Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProjectActivity {
  id          String   @id @default(cuid())
  projectId   String
  userId      String
  actionType  String
  entityType  String
  entityId    String?
  entityName  String?
  oldValue    String?
  newValue    String?
  description String
  createdAt   DateTime @default(now())
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
}
