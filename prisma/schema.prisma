
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model User {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String   @unique
  password  String
  projects  Project[]
  tasks     Task[]
  tags      Tag[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id        String    @id @default(cuid())
  name      String
  emoji     String?
  notes     String?
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks     Task[]
  sections  Section[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Task {
  id           String       @id @default(cuid())
  title        String
  description  String?
  completed    Boolean      @default(false)
  priority     String       @default("NONE")
  dueDate      DateTime?
  isPinned     Boolean      @default(false)
  parentTaskId String?
  parentTask   Task?        @relation("SubTasks", fields: [parentTaskId], references: [id], onDelete: Cascade)
  subTasks     Task[]       @relation("SubTasks")
  projectId    String
  project      Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  sectionId    String?
  section      Section?     @relation(fields: [sectionId], references: [id], onDelete: SetNull)
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags         TaskTag[]
  reminders    Reminder[]
  attachments  Attachment[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Section {
  id        String   @id @default(cuid())
  name      String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks     Task[]
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id        String    @id @default(cuid())
  name      String
  color     String
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks     TaskTag[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  @@unique([name, userId])
}

model TaskTag {
  id     String @id @default(cuid())
  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tagId  String
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@unique([taskId, tagId])
}

model Reminder {
  id        String   @id @default(cuid())
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  datetime  DateTime
  message   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attachment {
  id        String   @id @default(cuid())
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  fileName  String
  fileType  String   // "image", "text", "markdown", etc.
  fileUrl   String
  fileSize  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}