import { db } from "@/lib/db"

// Proje aktivitesi t√ºrleri
export const ProjectActivityTypes = {
  // Proje i≈ülemleri
  PROJECT_CREATED: "project_created",
  PROJECT_UPDATED: "project_updated",
  PROJECT_DELETED: "project_deleted",
  
  // B√∂l√ºm i≈ülemleri
  SECTION_CREATED: "section_created",
  SECTION_MOVED: "section_moved",
  SECTION_DELETED: "section_deleted",
  
  // G√∂rev i≈ülemleri (projeye ait)
  TASK_CREATED: "task_created",
  TASK_COMPLETED: "task_completed",
  TASK_UNCOMPLETED: "task_uncompleted",
  TASK_DELETED: "task_deleted",
  
  // Atama i≈ülemleri
  USER_ASSIGNED: "user_assigned",
  EMAIL_ASSIGNED: "email_assigned",
  ASSIGNMENT_REMOVED: "assignment_removed"
} as const

export type ProjectActivityType = typeof ProjectActivityTypes[keyof typeof ProjectActivityTypes]

// Aktivite olu≈üturma fonksiyonu
export async function createProjectActivity(data: {
  projectId: string
  userId: string
  actionType: ProjectActivityType
  entityType: "project" | "section" | "task"
  entityId?: string | null
  entityName?: string | null
  oldValue?: string | null
  newValue?: string | null
  description: string
}) {
  try {
    const activity = await db.projectActivity.create({
      data: {
        projectId: data.projectId,
        userId: data.userId,
        actionType: data.actionType,
        entityType: data.entityType,
        entityId: data.entityId,
        entityName: data.entityName,
        oldValue: data.oldValue,
        newValue: data.newValue,
        description: data.description
      }
    })
    return activity
  } catch (error) {
    console.error("Proje aktivitesi olu≈üturulurken hata:", error)
    return null
  }
}

// Aktivite a√ßƒ±klamasƒ± olu≈üturma helper'larƒ±
export function getProjectActivityDescription(
  actionType: ProjectActivityType,
  entityName?: string | null,
  oldValue?: string | null,
  newValue?: string | null
): string {
  switch (actionType) {
    // Proje i≈ülemleri
    case ProjectActivityTypes.PROJECT_CREATED:
      return "Proje olu≈üturuldu"
    case ProjectActivityTypes.PROJECT_UPDATED:
      if (oldValue && newValue) {
        return `Proje g√ºncellendi: "${oldValue}" ‚Üí "${newValue}"`
      }
      return "Proje g√ºncellendi"
    case ProjectActivityTypes.PROJECT_DELETED:
      return "Proje silindi"
    
    // B√∂l√ºm i≈ülemleri
    case ProjectActivityTypes.SECTION_CREATED:
      return `B√∂l√ºm olu≈üturuldu: "${entityName}"`
    case ProjectActivityTypes.SECTION_MOVED:
      return `B√∂l√ºm ta≈üƒ±ndƒ±: "${entityName}"`
    case ProjectActivityTypes.SECTION_DELETED:
      return `B√∂l√ºm silindi: "${entityName}"`
    
    // G√∂rev i≈ülemleri
    case ProjectActivityTypes.TASK_CREATED:
      return `G√∂rev olu≈üturuldu: "${entityName}"`
    case ProjectActivityTypes.TASK_COMPLETED:
      return `G√∂rev tamamlandƒ±: "${entityName}"`
    case ProjectActivityTypes.TASK_UNCOMPLETED:
      return `G√∂rev tamamlanmamƒ±≈ü olarak i≈üaretlendi: "${entityName}"`
    case ProjectActivityTypes.TASK_DELETED:
      return `G√∂rev silindi: "${entityName}"`
    
    // Atama i≈ülemleri
    case ProjectActivityTypes.USER_ASSIGNED:
      return `${entityName} projeye ${newValue || 'VIEWER'} rol√ºyle atandƒ±`
    case ProjectActivityTypes.EMAIL_ASSIGNED:
      return `${entityName} email ile projeye davet edildi`
    case ProjectActivityTypes.ASSIGNMENT_REMOVED:
      return `${entityName} projeden √ßƒ±karƒ±ldƒ±`
    
    default:
      return "Bilinmeyen aktivite"
  }
}

// Aktivite t√ºr√ºne g√∂re ikon belirleme
export function getProjectActivityIcon(actionType: ProjectActivityType): string {
  switch (actionType) {
    // Proje i≈ülemleri
    case ProjectActivityTypes.PROJECT_CREATED:
      return "‚ú®"
    case ProjectActivityTypes.PROJECT_UPDATED:
      return "‚úèÔ∏è"
    case ProjectActivityTypes.PROJECT_DELETED:
      return "üóëÔ∏è"
    
    // B√∂l√ºm i≈ülemleri
    case ProjectActivityTypes.SECTION_CREATED:
      return "üìÅ"
    case ProjectActivityTypes.SECTION_MOVED:
      return "üì¶"
    case ProjectActivityTypes.SECTION_DELETED:
      return "üóÇÔ∏è"
    
    // G√∂rev i≈ülemleri
    case ProjectActivityTypes.TASK_CREATED:
      return "‚ûï"
    case ProjectActivityTypes.TASK_COMPLETED:
      return "‚úÖ"
    case ProjectActivityTypes.TASK_UNCOMPLETED:
      return "‚Ü©Ô∏è"
    case ProjectActivityTypes.TASK_DELETED:
      return "üóëÔ∏è"
    
    // Atama i≈ülemleri
    case ProjectActivityTypes.USER_ASSIGNED:
      return "üë§"
    case ProjectActivityTypes.EMAIL_ASSIGNED:
      return "üìß"
    case ProjectActivityTypes.ASSIGNMENT_REMOVED:
      return "üëã"
    
    default:
      return "üìù"
  }
}

// Aktivite t√ºr√ºne g√∂re renk belirleme
export function getProjectActivityColor(actionType: ProjectActivityType): string {
  switch (actionType) {
    // Proje i≈ülemleri
    case ProjectActivityTypes.PROJECT_CREATED:
      return "text-green-600"
    case ProjectActivityTypes.PROJECT_UPDATED:
      return "text-blue-600"
    case ProjectActivityTypes.PROJECT_DELETED:
      return "text-red-600"
    
    // B√∂l√ºm i≈ülemleri
    case ProjectActivityTypes.SECTION_CREATED:
      return "text-purple-600"
    case ProjectActivityTypes.SECTION_MOVED:
      return "text-orange-600"
    case ProjectActivityTypes.SECTION_DELETED:
      return "text-red-600"
    
    // G√∂rev i≈ülemleri
    case ProjectActivityTypes.TASK_CREATED:
      return "text-green-600"
    case ProjectActivityTypes.TASK_COMPLETED:
      return "text-emerald-600"
    case ProjectActivityTypes.TASK_UNCOMPLETED:
      return "text-yellow-600"
    case ProjectActivityTypes.TASK_DELETED:
      return "text-red-600"
    
    // Atama i≈ülemleri
    case ProjectActivityTypes.USER_ASSIGNED:
      return "text-blue-600"
    case ProjectActivityTypes.EMAIL_ASSIGNED:
      return "text-indigo-600"
    case ProjectActivityTypes.ASSIGNMENT_REMOVED:
      return "text-orange-600"
    
    default:
      return "text-gray-600"
  }
}